generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  twoFactorEnabled Boolean? @default(false) @map("two_factor_enabled")
  twoFactorSecret  String? @map("two_factor_secret")

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  //@db.Text
  access_token      String?  //@db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  //@db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") //@db.Text
  accessToken  String?  @map("access_token") //@db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// enum AccessStatus {
 // USER
 // SHARED
 // COMPANY
//}

model File {
  id        Int         @id @default(autoincrement())
  user_id   String
  name      String
  date      DateTime    @default(now())
  isFolder  Boolean
  extension String?     // Nullable because folders might not have an extension
  idParent  Int?        // Nullable to allow root-level files/folders
  size      Int
  //statut    AccessStatus
  statut    String
  file_name_on_s3 String?
  s3_server_name String?
}

model S3 {
  endpoint    String    
  ssl        Boolean
  port      Int
  access_key  String
  secret_key  String
  bucket      String
  name        String @id @default(cuid())
}